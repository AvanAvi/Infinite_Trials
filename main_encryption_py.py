# -*- coding: utf-8 -*-
"""Main_Encryption.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rxxw0z-YltOljfYh8w6LlKembHpj5t78
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

df = pd.read_excel(io.BytesIO(uploaded['Data_sheet_part_number.xlsx']))

def get_partition(char):
    matching_rows = df.loc[df['CHARACTER'] == char, 'PART']
    if len(matching_rows) == 0:
        raise ValueError(f"No matching partition found for character: {char}")
    return matching_rows.iloc[0]

# Constant C
C = 426609638937

def calculate_Z(password):
    if not isinstance(password, str):
        raise ValueError("Input must be a string.")
    if not 10 <= len(password) <= 32:
        raise ValueError("Input string must be between 10 and 32 characters long.")

    # Calculate K as the sum of partition numbers of the characters
    K = sum(get_partition(c) for c in password)

    # Calculate Z
    Z = K + C

    return Z

import pandas as pd


data = pd.read_excel('Data_sheet_part_number.xlsx', engine='openpyxl')

# Display the content of the file
print(data)

s_no_list = data['S. NO.'].tolist()
character_list = data['CHARACTER'].tolist()
part_list = data['PART'].tolist()

print("S. NO. List:", s_no_list)
print("CHARACTER List:", character_list)
print("PART List:", part_list)

# Assuming s_no_list, character_list, part_list are lists of the same length
for s_no, char, part in zip(s_no_list, character_list, part_list):
    print(f"{s_no} : {char} : {part}")

# Initialize an empty dictionary
lookup_table = {}

# Iterate over the three lists together
for s_no, character, part in zip(s_no_list, character_list, part_list):
    # Skip if the character or part is NaN
    if pd.isna(character) or pd.isna(part):
        continue

    # Add to the dictionary
    lookup_table[character] = part

# Creating the lookup table
lookup_table = {str(character): part for s_no, character, part in zip(s_no_list, character_list, part_list)}

# Constant C
C = 426609638937

def calculate_Z(password):
    if not isinstance(password, str):
        raise ValueError("Input must be a string.")
    if not 10 <= len(password) <= 32:
        raise ValueError("Input string must be between 10 and 32 characters long.")

    # Replace all forms of typographical quotes with straight quotes
    password = password.replace('”', '"').replace('“', '"')

    # Calculate K as the sum of partition numbers of the characters
    K = 0
    for c in password:
        if c in lookup_table:
            K += lookup_table[c]
        else:
            raise ValueError(f"Character '{c}' not found in the lookup table.")

    # Calculate Z
    Z = K + C

    return Z


# Ask the user for a password
password = input("Enter a password (10-32 characters): ")

# Call the function with the user's input
Z = calculate_Z(password)

# Print the result
print(f"Here is your password encoded in 'Avan's schema fella': {Z}")

